{
  "name": "Virtual Squash 2",
  "tagline": "Jeu de squash par la Kinect réalisé à l'École des Métiers du Valais (EMVs)",
  "body": "![virtualsquash](https://cloud.githubusercontent.com/assets/1939395/11165388/a51cdcfa-8b0d-11e5-9d7c-415915b4c658.png)\r\n\r\nTable des matières\r\n=================\r\n\r\n   * [1 Documentation](#1-documentation)\r\n      * [1.1 Organisation du code](#11-organisation-du-code)\r\n         * [1.1.1 Classe Main](#111-classe-main)\r\n         * [1.1.2 Classe Player](#112-classe-player)\r\n         * [1.1.3 Classe Balle](#113-classe-balle)\r\n         * [1.1.4 Classe Game](#114-classe-game)\r\n      * [1.2 Fonctionnalités](#12-fonctionnalités)\r\n         * [1.2.1 Multi-Joueurs](#121-multi-joueurs)\r\n         * [1.2.2 Simulation des rebonds – murs et fond](#122-simulation-des-rebonds--murs-et-fond)\r\n         * [1.2.3 Simulation des rebonds – raquette](#123-simulation-des-rebonds--raquette)\r\n         * [1.2.4 Taille de la raquette](#124-taille-de-la-raquette)\r\n         * [1.2.5 Gaucher ou droitier](#125-gaucher-ou-droitier)\r\n         * [1.2.6 Couleur des raquettes et de la balle](#126-couleur-des-raquettes-et-de-la-balle)\r\n         * [1.2.7 Bouton recommencer](#127-bouton-recommencer)\r\n         * [1.2.8 Affichage de la raquette](#128-affichage-de-la-raquette)\r\n      * [1.3 Réglages de constantes possibles](#13-réglages-de-constantes-possibles)\r\n         * [1.3.1 LONGUEUR_ECRAN et LARGEUR_ECRAN (Main.java)](#131-longueur_ecran-et-largeur_ecran-mainjava)\r\n         * [1.3.2 NOMBRE_JOUEURS (Main.java)](#132-nombre_joueurs-mainjava)\r\n         * [1.3.3 FACTEUR_HORIZONTAL et FACTEUR_VERTICAL (Main.java)](#133-facteur_horizontal-et-facteur_vertical-mainjava)\r\n         * [1.3.4 TIMEOUT (Game.java)](#134-timeout-gamejava)\r\n         * [1.3.5 WIDTH et HEIGHT (Player.java)](#135-width-et-height-playerjava)\r\n      * [1.4 Installation du projet](#14-installation-du-projet)\r\n         * [1.4.1 IntelliJ](#141-intellij)\r\n         * [1.4.2 Eclipse](#142-eclipse)\r\n   * [2 Améliorations possibles](#2-améliorations-possibles)\r\n      * [2.1 Multi-joueurs en réseau](#21-multi-joueurs-en-réseau)\r\n      * [2.2 Utilisation d'un moteur 3D et physique](#22-utilisation-dun-moteur-3d-et-physique)\r\n\r\n# 1 Documentation\r\n\r\n## 1.1 Organisation du code\r\n\r\n### 1.1.1 Classe Main\r\nClasse de la fenêtre principale. Elle fait le lien entre la Kinect et les classes Player, Ball et Game. En cas d'utilisation d'un autre appareil, il y aura seulement cette classe à modifier.\r\n- Mets à jour les positions des joueurs (classe _Player_)\r\n- Instancie les classes _Ball_ et _Game_\r\n- Affiche l'interface graphique (scores, vainqueur, bouton recommencer)\r\n\r\n### 1.1.2 Classe Player\r\n- Stocke les positions du joueur et son score\r\n- Affiche la raquette\r\n- Calcule la direction de la frappe (détaillé dans Simulation des rebonds – raquette)\r\n\r\n### 1.1.3 Classe Balle\r\nPermet d'afficher une balle qui rebondit contre les murs.\r\nOn peut la faire rebondir dans une direction avec la méthode _bounce_ et la faire accélérer avec la méthode _accelerate_.\r\nOn peut changer sa couleur (attribut _color_).\r\n\r\n### 1.1.4 Classe Game\r\n- Gère les tours des joueurs\r\n- Calcule des scores\r\n- Vérifie si le joueur frappe la balle et fait bouger la balle en conséquence\r\n- Désigne le vainqueur et si la partie est finie\r\n- Choisi le mode de jeu en fonction du nombre de joueurs détectés\r\n\r\n## 1.2 Fonctionnalités\r\n\r\n### 1.2.1 Multi-Joueurs\r\n\r\n- 1 joueur : Gagne 1 point à chaque rebond de la balle. S'il n'arrive pas à la renvoyer assez vite (voir timeout) son score est remis à zéro. Son meilleur score est affiché.\r\n- 2 joueurs : Les joueurs font rebondir la balle l'un après l'autre. Si un joueur n'arrive pas à la frapper à son tour, son adversaire marque 1 point. La partie se termine à 21 points avec 2 points d'écart.\r\n- Plus de 2 joueurs : Ce sont les mêmes règles que pour 2 joueurs. Pour activer ce mode, il faudra augmenter la constante limite de joueurs (NOMBRE\\_JOUEURS).\r\n\r\nLe jeu passe automatiquement d'un mode à l'autre en fonction du nombre de joueurs détectés.\r\n\r\n### 1.2.2 Simulation des rebonds – murs et fond\r\n\r\nLorsque la balle touche un bord de l'écran ou le fond de la salle, elle rebondit dans la direction inverse (Par exemple, si elle atteint la position maximale sur l'axe _z_, son vecteur de déplacement _z_ est inversé).\r\n\r\nC'est la seule partie pour laquelle j'ai gardé pas mal de code du projet fait il y a 2 ans.\r\n\r\n### 1.2.3 Simulation des rebonds – raquette\r\n\r\nLorsque le joueur frappe la balle, elle part dans la direction du mouvement de sa main.\r\n\r\nPour donner un effet de rebond plus réaliste, j'ai calculé la direction de la frappe avec les 15 dernières positions, normalisé ce vecteur et multiplié par la norme du vecteur du déplacement de la balle pour conserver la vitesse de la balle.\r\n\r\nDonc la balle prend la direction de la frappe tout en conservant sa vitesse.\r\n\r\n### 1.2.4 Taille de la raquette\r\n\r\nLa raquette a une taille de base (définie par les constantes WIDTH et HEIGHT) ensuite elle varie lorsque la main s'approche ou s'éloigne de la Kinect.\r\n\r\n### 1.2.5 Gaucher ou droitier\r\n\r\nAu début de la partie, le joueur met en avant la main qu'il veut utiliser. La raquette sera dans cette main tout au long de la partie.\r\n\r\n### 1.2.6 Couleur des raquettes et de la balle\r\n\r\nChaque joueur a une raquette de couleur différente. Lorsque c'est à son tour de frapper la balle, cette dernière devient de la même couleur que la balle.\r\n\r\n### 1.2.7 Bouton recommencer\r\n\r\nA la fin de la partie, un bouton recommencer est affiché et le joueur peut facilement le sélectionner avec sa main au lieu de devoir appuyer sur une touche du clavier.\r\n\r\n### 1.2.8 Affichage de la raquette\r\n\r\nL'inclinaison du bras est reproduite par la raquette dans le jeu.\r\n\r\n## 1.3 Réglages de constantes possibles\r\n\r\n### 1.3.1 LONGUEUR\\_ECRAN et LARGEUR\\_ECRAN (Main.java)\r\n\r\nRésolution de l'écran\r\n\r\n### 1.3.2 NOMBRE\\_JOUEURS (Main.java)\r\n\r\nPermet de limiter le nombre de joueurs\r\n\r\nModes de jeu selon Multi-Joueurs\r\n\r\n### 1.3.3 FACTEUR\\_HORIZONTAL et FACTEUR\\_VERTICAL (Main.java)\r\n\r\nUtilisés lors de la conversion des données de la Kinect (mètres  pixels).\r\n\r\nPour que la main soit alignée à la raquette virtuelle, il faut faire varier ces valeurs qui dépendent de la taille de l'écran et de la distance du joueur.\r\n\r\n### 1.3.4 TIMEOUT (Game.java)\r\n\r\nTemps que le joueur a pour frapper la balle lorsqu'elle arrive vers lui.\r\n\r\n### 1.3.5 WIDTH et HEIGHT (Player.java)\r\n\r\nTaille de la raquette à 1 mètre. Elle variera automatiquement si la main se rapproche ou s'éloigne.\r\n\r\n## 1.4 Installation du projet\r\n\r\nInstaller les SDK Kinect (2.0+) [https://dev.windows.com/en-us/kinect](https://dev.windows.com/en-us/kinect)\r\n\r\nInstaller Java JDK 8+ [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n\r\n### 1.4.1 IntelliJ\r\n\r\nLe projet et ses dépendances sont automatiquement détectés.\r\n\r\n![picture1](https://cloud.githubusercontent.com/assets/1939395/11165344/61de7b7a-8b0c-11e5-955e-780c41a51dc1.png)\r\n![picture2](https://cloud.githubusercontent.com/assets/1939395/11165346/61e12546-8b0c-11e5-8961-03e45347aed7.png)\r\n\r\nEn cas de problème, vérifiez que ces librairies soient bien chargées.\r\n\r\n![picture3](https://cloud.githubusercontent.com/assets/1939395/11165348/61e269ce-8b0c-11e5-9275-7e785691ff69.png)\r\n\r\n### 1.4.2 Eclipse\r\n\r\nLe projet a été développé avec IntelliJ mais j'ai créé les fichiers nécessaires pour qu'il soit importable directement dans Eclipse.\r\n\r\n![picture4](https://cloud.githubusercontent.com/assets/1939395/11165349/61e33818-8b0c-11e5-9eb6-a54ca62e5b45.png)\r\n![picture5](https://cloud.githubusercontent.com/assets/1939395/11165347/61e25cfe-8b0c-11e5-8977-4c8f65396fcc.png)\r\n![picture6](https://cloud.githubusercontent.com/assets/1939395/11165345/61dfe956-8b0c-11e5-80be-314e5cf13fe8.png)\r\n\r\nEn cas de problème, vérifiez que ces librairies soient bien chargées.\r\n\r\n![picture7](https://cloud.githubusercontent.com/assets/1939395/11165350/61f606aa-8b0c-11e5-9750-abb72f755e4b.png)\r\n\r\n# 2 Améliorations possibles\r\n\r\n## 2.1 Multi-joueurs en réseau\r\n\r\nUn mode multi-joueurs en réseau serait tout à fait réalisable avec quelques jours de plus et une deuxième Kinect.\r\n\r\nConnexion socket entre 2 PCs :\r\n- Le PC « serveur » calcule les rebonds, scores et un joueur joue sur celui-ci\r\n- Le PC « client » envoie la position de son joueur au serveur (objet Player sérialisé) et récupère la position de la balle, le score etc…\r\n\r\n## 2.2 Utilisation d'un moteur 3D et physique\r\n\r\nPour une simulation plus réaliste des rebonds, de la gravité et de la profondeur\r\n\r\nPar exemple avec Unity ( [https://unity3d.com/](https://unity3d.com/)) ou Unreal Engine ( [https://www.unrealengine.com/](https://www.unrealengine.com/)), tous deux gratuits pour notre type d'usage.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}